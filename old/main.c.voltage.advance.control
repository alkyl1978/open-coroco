#define F_CPU 10000000UL
#include <avr/io.h>
#include <util/delay.h>
#include <stdio.h>
#include "UART.h"
#include "Hardware.h"
#include "Timer.h"
#include <avr/interrupt.h>
#include <math.h>

#define PORTC_ON( pin )		PORTC|= (1 << pin );
#define PORTC_OFF( pin )    	PORTC&= (~(1 << pin )); 

double freq=0;
double phase=0; //in rads
int dutyA;
int A=0.0;
#define maxValPWM 0x1ff
//#define Kv 900 //motor sky
#define Kv 62.5
//#define Kv 416
//#define maxFreq 570 //motor sky
#define maxFreq 39.68
//#define maxFreq 50
//#define P 0.1
#define Tc 0.000064*8
//#define maxFreq 264
//This speed is for 12.7Volts: Formula: Poles*Kv*V/60. Poles=3, Kv=900
int T=20000;
int dT=50;
int closeLoop=0;
double phaseRotor=0;
double phaseStator=0;
double maxPhaseAdvance=90*2*M_PI/360;
double phaseAdvance=0;

ISR(SIG_OVERFLOW1) {
  //We enter this routine with a frequency of 15625Hz
  //One count is 0.000064s
  //static double freq=400;
//  static double counter=0;
  //static double time=0;
  //static double phaseStatorOld=0;
  //static double phaseRotorOld=0;
  int dutyB;
  int dutyC;
  static int time=-1;
  static int Ttemp=0;
  time+=1;
  //double vError=0;
  PORTC_ON( PINC0 )

  PORTC_ON( PINC1 )
  
  //Dealing with stopped rotor problem
  Ttemp+=1;
  if ((Ttemp*2>T) && closeLoop) { //if no more readings from the halls update T then update T
    T=Ttemp;
  }

  //Rotor and Stator phase calculations
  phaseStator=phaseStator+2*M_PI/((double) T);
  phaseRotor=phaseRotor+2*M_PI/((double) T);

  PORTC_OFF( PINC1 )

  //code for hall sensoring
  static int hall1Rise=0;
  static int hall1Old=-20000;
  static int hall1tOld=-30000; //To produce a small initial frequency
  int hall1tOldtemp=-30000;
  int hall1;
  int hallUpdate=0;
  static int hallUpdateRise=0;
  static int hallUpdateFall=0;
  hall1=(int) ADC;
  if (hall1 > hall1Old) {
    hall1Rise=1;
  } 
  if (hall1 < hall1Old) {
    hall1Rise=0;
  }
  if ((hall1Rise==1) && (hall1>0) && (hallUpdateRise==0)) {
    PORTC_ON( PINC2 )
    //zero crossing rising
    //Fix phase to zero
    //Calculate new frequency
    if (closeLoop==1) {
      T=(time-hall1tOld)*2; //Half a cycle
    }
    hall1tOldtemp=time;
    phaseRotor=0;
    hallUpdate=1;
    hallUpdateRise=1;
    hallUpdateFall=0;
    //PORTC_OFF( PINC2 )
  }
  if ((hall1Rise==0) && (hall1<0) && (hallUpdateFall==0)) {
    //PORTC_ON( PINC2 )
    //zero crossing falling
    //Fix phase to 180
    //Calculate new frequency
    if (closeLoop==1) {
      T=(time-hall1tOld)*2; //Half a cycle
    }
    hall1tOldtemp=time;
    phaseRotor=M_PI;
    hallUpdate=1;
    hallUpdateFall=1;
    hallUpdateRise=0;
    PORTC_OFF( PINC2 )
  }
  if (hallUpdate==1) {
    hall1tOld=hall1tOldtemp;
    hallUpdate=0;
    Ttemp=0;
  }
  hall1Old=hall1;


/*
  //PI controllers over phaseAdvance and Voltage
  #define Akp 0.001
  #define Pkp Akp*M_PI*0.5/2
  if (closeLoop==1) {
    if ((phaseAdvance>=maxPhaseAdvance) & (A>=1.0)) { //Maximum speed with maximum advance , here we need even more advance to get more speed tho with less torque.
      phaseAdvance+=Pkp*(dT-T);
      A=1.0;
      //Do something weird
    } else {
      A+=Akp*(dT-T);
      phaseAdvance+=Pkp*(dT-T);
      if (phaseAdvance>maxPhaseAdvance) {
        phaseAdvance=maxPhaseAdvance;
      }
    }
  }
  */

  //update phaseStator
  if (closeLoop==1) {
    if ((phaseStator-phaseRotor) > maxPhaseAdvance) {
      phaseStator=maxPhaseAdvance+phaseRotor;
    } else {
      phaseStator=phaseRotor+phaseAdvance;
    }
  } else {
    phaseRotor=phaseStator;
  }
  

  if (phaseStator>=2.0*M_PI) {
    phaseStator=phaseStator-2.0*M_PI;
    phaseRotor=phaseRotor-2.0*M_PI;
  }
  
  PORTC_ON( PINC1 )
  dutyA=A*sin(phaseStator);
  dutyB=A*sin(phaseStator-2.0*M_PI/3.0);
  dutyC=A*sin(phaseStator-4.0*M_PI/3.0);
  PORTC_OFF( PINC1 )
  
  if (dutyA<0) {
    OCR1A=0;
    OCR3A=-dutyA;
  } else {
    OCR1A = dutyA;
    OCR3A =0;    
  }
  if (dutyB<0) {
    OCR1B=0;
    OCR3B=-dutyB;
  } else {
    OCR1B = dutyB;
    OCR3B = 0;
  }
  if (dutyC<0) {
    OCR1C=0;
    OCR3C=-dutyC;
  } else {
    OCR1C = dutyC;
    OCR3C = 0;
  }
  
  PORTC_OFF( PINC0 )
  
}

void delayms(uint16_t millis) {
  //uint16_t loop;
  while ( millis ) {
    _delay_ms(1);
    millis--;
  }
}

int main(void) {
  //int i;
  FILE *u0;
  double error;
  double dfreq=0;
  double tfreq;
  double P=0.1;
  
  InitHardware();
  
#if defined( __AVR_LIBC_VERSION__ )
  u0 = fdevopen( UART0_PutCharStdio, UART0_GetCharStdio );
#else  
  u0 = fdevopen( UART0_PutCharStdio, UART0_GetCharStdio, 0 );
#endif
  OCR1A = 0x00;
  OCR1B = 0;
  OCR1C = 0;
  OCR3A = 0;
  OCR3B= 0 ;
  OCR3C=0;
  timer13Start();
  ADCSR |= (1 << ADFR);
  ADMUX |= (1 << ADLAR);
  ADCSR |= (1 << ADSC);
  ADMUX |= (1 << MUX4);
  //ADCSR=0xC7;
  //ADCSR=0xE7;
  //ADMUX=0x00;
  
  //DDRC|= (1 << DDC0);
  //DDRC|= (1 << DDC1);
  DDRC=0xFF;
  PORTC_OFF( PINC0 )
  
  while(1) {
    LED_ON( BLUE );
    LED_OFF( RED );
    //printf("Led Blue On \n");
    delayms(50);
    LED_OFF( BLUE );
    LED_ON( RED );
    //printf("Led Blue OFF \n");
    //TCNT1=0;
    printf("Timer value: %04x ", TCNT1);
    printf("Duty Cycle: %d \n", dutyA);
    printf("ADC0 input: %d\n", (int) ADC);
    //printf("ADCSR: %04x \n", ADCSR);
    //printf("Control Registers 1: %02x 2: %02x 3: %02x\n", TCCR1A, TCCR1B, TCCR1C);
    //printf("XVID crystal divider %02x\n",XDIV);
    
    
    
    /*for ( i = 0; i < 100; i++ ) 
    {
      WaitForTimer0Rollover();
    }*/
    
     
    if ( UART0_IsCharAvailable() )
    {
                char    ch = getchar();

                printf( "Read: '%c'\n", ch );

                if ( ch == ' ' )
                {
                    /*
                    printf( "*** Set the new frequency\n" );
                    //ch = getchar();
                    int rfreq;
                    scanf("%d",&rfreq);
                    printf( "*** Received %d. Continuing...\n",rfreq );
                    if (rfreq==0) {
                      freq=0;
                      printf( "*** Set the phase\n");
                      int rphase;
                      scanf("%d",&rphase);
                      printf( "*** Received %d. Continuing...\n",rphase);
                      dphase=rphase*2*M_PI/360;
                    }
                    //dfreq=rfreq;
                    A=((double) rfreq)/100;
                    //freq=dfreq;
                    //A=freq/maxFreq;
                    //printf("Setting Amplitud to: %d \n",(int) (100*A));
                    */
                    
                    printf( "*** Set the new Amplitud\n" );
                    //ch = getchar();
                    int rA;
                    scanf("%d",&rA);
                    printf( "*** Set the new Phase advance\n" );
                    //ch = getchar();
                    int rPhaseAdvance;
                    scanf("%d",&rPhaseAdvance);
                    printf( "*** Received %d %d. Continuing...\n",rA, rPhaseAdvance );
                    //dfreq=rfreq;
                    A=maxValPWM*((double) rA)/100;
                    maxPhaseAdvance=rPhaseAdvance*2*M_PI/360;
                    //freq=dfreq;
                    //A=freq/maxFreq;
                    //printf("Setting Amplitud to: %d \n",(int) (100*A));
                    
                    /*
                    printf( "*** Set the new frequency\n" );
                    //ch = getchar();
                    int rfreq;
                    scanf("%d",&rfreq);
                    printf( "*** Received %d. Continuing...\n",rfreq );
                    dT=(int) Tc*(1/((double) rfreq));
                    */
                    //printf("Setting Amplitud to: %d \n",(int) (100*A));
                }
    }
    if (closeLoop==0) {
      printf("Open Loop!\n");
      closeLoop=0;
      A=0.8*maxValPWM;
      dfreq=10;
      P=0.1;
      error=dfreq-freq;
      if (error>8.0) {
        error=8.0;
      }
      if (error<-8.0) {
        error=-8.0;
      }
      tfreq=freq+P*error;
      freq=tfreq;
      T=1/(freq*Tc);
      printf("Period: %d\n", T);
      if (freq>6) {
        A=0.6*maxValPWM;
        phaseAdvance=(A*M_PI/2)/maxValPWM;
        dT=(int) Tc*(1/20); //20Hz initial freq
        closeLoop=1;
      }
    } else {
      printf("Close loop!\n");
      if (1/(T*Tc)<3) {
        closeLoop=0;
        freq=1/(T*Tc);
      }
    }
    //A=tfreq/maxFreq;
    //if (A<0.6) {
    //  A=0.6;
    //}
    //if (freq>maxFreq) {
    //  A=1.0;
    //}
    printf("Frequency: %d, Dest Freq: %d \n",(int) (1/(((double ) T)*Tc)), (int) dfreq);
    printf("Phase Stator: %d \n", (int) (phaseStator*360/(2*M_PI)));
    printf("Period (in ticks) : %d \n", T );
    printf("========================================\n");
    delayms(50);
  }
  return 0;
}
